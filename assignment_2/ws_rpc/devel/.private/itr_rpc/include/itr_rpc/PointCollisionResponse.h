// Generated by gencpp from file itr_rpc/PointCollisionResponse.msg
// DO NOT EDIT!


#ifndef ITR_RPC_MESSAGE_POINTCOLLISIONRESPONSE_H
#define ITR_RPC_MESSAGE_POINTCOLLISIONRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace itr_rpc
{
template <class ContainerAllocator>
struct PointCollisionResponse_
{
  typedef PointCollisionResponse_<ContainerAllocator> Type;

  PointCollisionResponse_()
    : free(false)  {
    }
  PointCollisionResponse_(const ContainerAllocator& _alloc)
    : free(false)  {
  (void)_alloc;
    }



   typedef uint8_t _free_type;
  _free_type free;





  typedef boost::shared_ptr< ::itr_rpc::PointCollisionResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::itr_rpc::PointCollisionResponse_<ContainerAllocator> const> ConstPtr;

}; // struct PointCollisionResponse_

typedef ::itr_rpc::PointCollisionResponse_<std::allocator<void> > PointCollisionResponse;

typedef boost::shared_ptr< ::itr_rpc::PointCollisionResponse > PointCollisionResponsePtr;
typedef boost::shared_ptr< ::itr_rpc::PointCollisionResponse const> PointCollisionResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::itr_rpc::PointCollisionResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::itr_rpc::PointCollisionResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::itr_rpc::PointCollisionResponse_<ContainerAllocator1> & lhs, const ::itr_rpc::PointCollisionResponse_<ContainerAllocator2> & rhs)
{
  return lhs.free == rhs.free;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::itr_rpc::PointCollisionResponse_<ContainerAllocator1> & lhs, const ::itr_rpc::PointCollisionResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace itr_rpc

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::itr_rpc::PointCollisionResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::itr_rpc::PointCollisionResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::itr_rpc::PointCollisionResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::itr_rpc::PointCollisionResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::itr_rpc::PointCollisionResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::itr_rpc::PointCollisionResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::itr_rpc::PointCollisionResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "662d0577555df77dcaee5a646dd74f27";
  }

  static const char* value(const ::itr_rpc::PointCollisionResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x662d0577555df77dULL;
  static const uint64_t static_value2 = 0xcaee5a646dd74f27ULL;
};

template<class ContainerAllocator>
struct DataType< ::itr_rpc::PointCollisionResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "itr_rpc/PointCollisionResponse";
  }

  static const char* value(const ::itr_rpc::PointCollisionResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::itr_rpc::PointCollisionResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
"# Return true if configuration is possible (grid cell unoccupied)\n"
"bool free\n"
;
  }

  static const char* value(const ::itr_rpc::PointCollisionResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::itr_rpc::PointCollisionResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.free);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PointCollisionResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::itr_rpc::PointCollisionResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::itr_rpc::PointCollisionResponse_<ContainerAllocator>& v)
  {
    s << indent << "free: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.free);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ITR_RPC_MESSAGE_POINTCOLLISIONRESPONSE_H
